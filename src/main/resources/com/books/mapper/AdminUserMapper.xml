<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.books.mapper.AdminUserMapper">
	
	<!-- list화면 회원 목록 -->
	<sql id="criteria">
		<if test="kw_name != null and kw_name != ''">
			<trim prefix="(" suffix=") AND" >
				name LIKE '%'||#{kw_name}||'%' OR userid LIKE '%'||#{kw_name}||'%' 
			</trim>
		</if>
		<if test="kw_date_from != null and kw_date_to != null and kw_date_from != '' and kw_date_to != ''">
			regdate BETWEEN TO_DATE(#{kw_date_from},'YYYY-MM-DD') AND TO_DATE(#{kw_date_to}, 'YYYY-MM-DD')+0.99999 AND
		</if>
	</sql>

	<select id="getTotalCount" resultType="int">
		<![CDATA[
			SELECT COUNT(userid)
			FROM(
				SELECT userid
				FROM(
					SELECT DISTINCT u.userid, name, regdate
					FROM tbl_user u
					INNER JOIN tbl_order o ON u.userid = o.userid (+)
				)
				WHERE ]]><include refid="criteria"/> userid > '0'
			)
			WHERE userid > '0'
	</select>
	
	<select id="getList" resultType="com.books.domain.UserVO">
		<![CDATA[
			SELECT userid, name, phone, regdate, orderid
			FROM(
				SELECT rownum rn, userid, name, phone, regdate, orderid 
				FROM(
					SELECT u.userid, name, phone, regdate, max(orderid) orderid
					FROM tbl_user u
					INNER JOIN TBL_ORDER o ON u.userid = o.userid (+)
					GROUP BY u.userid, name, phone, regdate
				)
				WHERE ]]><include refid="criteria"/><![CDATA[rownum <= #{pageNum} * #{amount}
			)
			WHERE rn > (#{pageNum} -1) * #{amount}
 		]]>  
	</select>
	
	
	<!-- 선택 유저 회원정보+권한정보 -->
	<resultMap type="com.books.domain.UserVO" id="userMap">
		<id property="userid" column="userid"/>
		<result property="name" column="name"/>
		<result property="phone" column="phone"/>
		<result property="email" column="email"/>
		<result property="zipcode" column="zipcode"/>
		<result property="address1" column="address1"/>
		<result property="address2" column="address2"/>
		<result property="regdate" column="regdate"/>
		<result property="adminMemo" column="adminmemo"/>
		<collection property="authList" resultMap="authMap"/>
	</resultMap>
	
	<resultMap type="com.books.domain.AuthVO" id="authMap">
		<result property="userid" column="userid"></result>
		<result property="auth" column="auth"></result>
	</resultMap>
	
	<select id="readUserWithAuth" resultMap="userMap">
		SELECT u.userid, name, phone, email, zipcode, address1, address2, regdate, adminmemo, auth
		FROM tbl_user u LEFT OUTER JOIN tbl_user_auth ua ON u.userid = ua.userid
		WHERE ua.userid = #{userid} 
	</select>
	
	
	<!-- 선택 유저 주문내역 리스트 to JSON -->
	<select id="getUserOrderCount" resultType="int">
		SELECT COUNT(orderid) FROM tbl_order WHERE userid = #{userid}
	</select>
	
	<select id="getUserOrderListWithPaging" resultType="com.books.domain.OrderVO">
		<![CDATA[
			SELECT orderid, orderdate, totalprice, dtell, orderstatus
			FROM (
					SELECT rownum rn, orderid, orderdate, totalprice, dtell, orderstatus
					FROM tbl_order
					WHERE userid=#{userid} AND rownum <= #{cri.pageNum} * #{cri.amount}
				)
			WHERE rn > (#{cri.pageNum} -1) * #{cri.amount}
		]]>
	</select>
	
	
	<!-- 선택 유저 업데이트 & 삭제 -->
	<update id="update">
		UPDATE tbl_user
		SET name  = #{name},
			phone = #{phone},
			email = #{email},
			zipcode  = #{zipcode},
			address1 = #{address1},
			address2 = #{address2},
			adminmemo = #{adminMemo}
		WHERE userid  = #{userid}
	</update>
	
	<delete id="delete">
		DELETE FROM tbl_user WHERE userid = #{userid}
	</delete>
	
	
	<insert id="insertAuth">
		INSERT INTO tbl_user_auth(USERID, AUTH)
		SELECT #{userid}, #{auth} 
		FROM DUAL 
		WHERE NOT EXISTS(
			SELECT userid, auth 
			FROM tbl_user_auth
			WHERE userid = #{userid} AND auth = #{auth}
		)
	</insert>
	
	<delete id="deleteAuth">
		DELETE FROM tbl_user_auth WHERE userid = #{userid} AND auth = #{auth}
	</delete>
</mapper>